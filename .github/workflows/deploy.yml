name: "Deploy to Amazon ECS"

on:
  push:
    branches:
      - "main"

permissions:
  id-token: "write"
  contents: "read"

jobs:
  build:
    name: "Deploy"
    runs-on: "ubuntu-latest"

    steps:
      - name: "Checkout code"
        uses: "actions/checkout@v4"

      - name: "Setup Terraform"
        uses: "hashicorp/setup-terraform@v3"
        with:
          terraform_wrapper: false

      - name: "Extract Terraform outputs"
        run: |
          cd ./terraform/infra
          terraform init
          echo "AWS_REGION=$(terraform output -raw __gha_aws_region)" >> $GITHUB_ENV
          echo "ECR_REPOSITORY=$(terraform output -raw __gha_ecr_repository)" >> $GITHUB_ENV
          echo "ECS_CLUSTER=$(terraform output -raw __gha_ecs_cluster)" >> $GITHUB_ENV
          echo "ECS_SERVICE=$(terraform output -raw __gha_ecs_service)" >> $GITHUB_ENV
          echo "GHA_ROLE_ARN=$(terraform output -raw __gha_gha_role_arn)" >> $GITHUB_ENV

      - name: "Configure AWS credentials"
        uses: "aws-actions/configure-aws-credentials@v4.1.0"
        with:
          aws-region: "${{ env.AWS_REGION }}"
          role-to-assume: "${{ env.GHA_ROLE_ARN }}"
          role-session-name: "${{ github.job }}"

      - name: "Login to ECR"
        id: "login-ecr"
        uses: "aws-actions/amazon-ecr-login@v2.0.1"

      - name: "Build and push image"
        id: "build-image"
        env:
          REGISTRY: "${{ steps.login-ecr.outputs.registry }}"
          IMAGE_TAG: "${{ github.sha }}"
        run: |
          cd ./app
          docker build -t $REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker tag $REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $REGISTRY/$ECR_REPOSITORY:latest
          docker push $REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $REGISTRY/$ECR_REPOSITORY:latest
          echo "image=$REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: "Force new deployment"
        run: |
          aws ecs update-service --cluster $ECS_CLUSTER --service $ECS_SERVICE --force-new-deployment
